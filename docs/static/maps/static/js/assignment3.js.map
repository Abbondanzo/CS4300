{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/common/render/2d/twoDimensionConverter.ts","webpack:///./src/common/render/2d/rectangle.ts","webpack:///./src/common/render/2d/star.ts","webpack:///./src/common/render/2d/triangle.ts","webpack:///./src/common/setup/createProgramFromScripts.ts","webpack:///./src/common/model/canvas2DShapeBuilders.ts","webpack:///./src/common/form/getElementValue.ts","webpack:///./src/common/util/colors.ts","webpack:///./src/common/render/2d/index.ts","webpack:///./src/assignment3/index.ts","webpack:///./src/assignment3/Scene.ts","webpack:///./src/common/setup/getScriptContentsById.ts","webpack:///./src/common/render/2d/circle.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","twoDimensionConverter","points","newPoints","length","push","renderRectangle","gl","rectangle","x1","position","x","dimensions","width","y1","y","height","x2","y2","bufferData","ARRAY_BUFFER","Float32Array","STATIC_DRAW","drawArrays","TRIANGLES","renderStar","star","radius","dimenScale","increment","Math","PI","cx","cy","starPoints","angle","xn","cos","yn","sin","tan","t1","t2","t3","renderTriangle","triangle","createProgramFromScripts","vertexShaderSource","fragmentShaderSource","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","buildBasicShape","type","properties","color","red","green","blue","translation","rotation","z","scale","buildRectangle","buildTriangle","buildShape","getElementValue","query","element","document","querySelector","Error","hexToRgb","hex","parseRgb","exec","rgb","parseInt","colorToHex","toString","rgbToHex","console","assert","rh","gh","bh","renderShape","shape","error","scene","canvasId","canvas","this","getContext","useProgram","attributeCoords","getAttribLocation","uniformResolution","getUniformLocation","uniformColor","enableVertexAttribArray","bufferCoords","createBuffer","uniform2f","clearCanvas","clearColor","clear","COLOR_BUFFER_BIT","shapes","bindBuffer","vertexAttribPointer","FLOAT","forEach","uniform4f","RED_RGB","BLUE_RGB","shapeType","config","render","onCanvasMouseDown","event","boundingRectangle","target","getBoundingClientRect","clientX","left","clientY","top","onAddShapeButtonClick","preventDefault","stopPropagation","onClearCanvasButtonClick","addEventListener","getScriptContentsById","id","getElementById","text","renderCircle","circle","SIDES","circlePoints","TRIANGLE_FAN"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,I;;;;;uEClFrD,kCAAO,IAAMC,EAAwB,SAACC,GAEpC,IADA,IAAMC,EAAY,GACTlC,EAAI,EAAGA,EAAIiC,EAAOE,OAAQnC,IACjCkC,EAAUE,KAAKH,EAAOjC,IAElBA,EAAI,GAAM,GACZkC,EAAUE,KAAK,GAGnB,OAAOF,I;;;;;iECTT,2EAEaG,EAAkB,SAC7BC,EACAC,GAEA,IAAMC,EAAKD,EAAUE,SAASC,EAAIH,EAAUI,WAAWC,MAAQ,EACzDC,EAAKN,EAAUE,SAASK,EAAIP,EAAUI,WAAWI,OAAS,EAC1DC,EAAKT,EAAUE,SAASC,EAAIH,EAAUI,WAAWC,MAAQ,EACzDK,EAAKV,EAAUE,SAASK,EAAIP,EAAUI,WAAWI,OAAS,EAC5Dd,EAAS,CAACO,EAAIK,EAAIG,EAAIH,EAAIL,EAAIS,EAAIT,EAAIS,EAAID,EAAIH,EAAIG,EAAIC,GAE7C,MAAOV,EAAUE,WAE5BR,EAAS,YAAsBA,IAGjCK,EAAGY,WAAWZ,EAAGa,aAAc,IAAIC,aAAanB,GAASK,EAAGe,aAC5Df,EAAGgB,WAAWhB,EAAGiB,UAAW,EAAG,K;;;;;i3BCR1B,IAAMC,EAAa,SACxBlB,EACAmB,GASA,IAPA,IAAMC,EAASD,EAAKd,WAAWI,OAAS,EAClCY,EAAaF,EAAKd,WAAWC,MAAQa,EAAKd,WAAWI,OACrDa,EAAuB,EAAVC,KAAKC,GAAU,EAC5BC,EAAKN,EAAKhB,SAASC,EACnBsB,EAAKP,EAAKhB,SAASK,EAEnBmB,EAAa,GACVxC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMyC,EAAQL,KAAKC,GAAK,EAAIrC,EAAImC,EAC1BO,EAAKJ,EAAKL,EAASG,KAAKO,IAAIF,GAASP,EACrCU,EAAKL,EAAKN,EAASG,KAAKS,IAAIJ,GAClCD,EAAW,GAAD,OAAIxC,EAAI,IAAO,CAAC0C,EAAIE,GAGhCJ,EAAW,GAAO,CAChBF,EACAC,EAAKN,GAAUG,KAAKU,IAAK,GAASV,KAAKC,IAAMD,KAAKU,IAAK,GAAUV,KAAKC,MAGxE,IAAMU,EAAK,GAAH,SAAOP,EAAW,IAAlB,EAA2BA,EAAW,IAAtC,EAA+CA,EAAW,KAC5DQ,EAAK,GAAH,SAAOR,EAAW,IAAlB,EAA2BA,EAAW,IAAtC,EAA+CA,EAAW,KAC5DS,EAAK,GAAH,SAAOT,EAAW,IAAlB,EAA2BA,EAAW,IAAtC,EAA+CA,EAAW,KAE9DhC,EAAS,GAAH,SAAOuC,GAAP,EAAcC,GAAd,EAAqBC,IAElB,MAAOjB,EAAKhB,WAEvBR,EAAS,YAAsBA,IAGjCK,EAAGY,WAAWZ,EAAGa,aAAc,IAAIC,aAAanB,GAASK,EAAGe,aAC5Df,EAAGgB,WAAWhB,EAAGiB,UAAW,EAAG,K;;;;;gEC7CjC,2EAEaoB,EAAiB,SAC5BrC,EACAsC,GAEA,IAAMpC,EAAKoC,EAASnC,SAASC,EAAIkC,EAASjC,WAAWC,MAAQ,EACvDC,EAAK+B,EAASnC,SAASK,EAAI8B,EAASjC,WAAWI,OAAS,EACxDC,EAAK4B,EAASnC,SAASC,EAAIkC,EAASjC,WAAWC,MAAQ,EACvDK,EAAK2B,EAASnC,SAASK,EAAI8B,EAASjC,WAAWI,OAAS,EAI1Dd,EAAS,CAACO,EAAIK,EAHP+B,EAASnC,SAASC,EAClBkC,EAASnC,SAASK,EAAI8B,EAASjC,WAAWI,OAAS,EAEhCC,EAAIC,GAErB,MAAO2B,EAASnC,WAE3BR,EAAS,YAAsBA,IAGjCK,EAAGY,WAAWZ,EAAGa,aAAc,IAAIC,aAAanB,GAASK,EAAGe,aAC5Df,EAAGgB,WAAWhB,EAAGiB,UAAW,EAAG,K;;;;;0ECrBjC,kCAAO,IAAMsB,EAA2B,SACtCvC,EACAwC,EACAC,GAGA,IAAMC,EAAe1C,EAAG2C,aAAa3C,EAAG4C,eACxC5C,EAAG6C,aAAaH,EAAcF,GAC9BxC,EAAG8C,cAAcJ,GAEjB,IAAMK,EAAiB/C,EAAG2C,aAAa3C,EAAGgD,iBAC1ChD,EAAG6C,aAAaE,EAAgBN,GAChCzC,EAAG8C,cAAcC,GAGjB,IAAME,EAAUjD,EAAGkD,gBAKnB,OAJAlD,EAAGmD,aAAaF,EAASP,GACzB1C,EAAGmD,aAAaF,EAASF,GACzB/C,EAAGoD,YAAYH,GAERA,I;;;;;w3BCpBT,IAAMI,EAAkB,SAACC,GAAD,OAA8B,WAElC,IADlBC,EACkB,uDADoB,GAEtC,UACED,OACAnD,SAAU,CACRC,EAAG,EACHI,EAAG,GAELH,WAAY,CACVC,MAAO,EACPG,OAAQ,GAEV+C,MAAO,CACLC,IAAK,EACLC,MAAO,EACPC,KAAM,GAERC,YAAa,CAAExD,EAAG,EAAGI,EAAG,GACxBqD,SAAU,CAAEC,EAAG,GACfC,MAAO,CAAE3D,EAAG,EAAGI,EAAG,IACf+C,KAIMS,EAAiBX,EAAgB,aACjCY,EAAgBZ,EAAgB,YAIhCa,GAHYb,EAAgB,QACdA,EAAgB,UAEjB,SACxBC,EACAC,GAEA,OAAOF,EAAgBC,EAAhBD,CAAsBE,M;;;;;iEClC/B,kCAAO,IAAMY,EAAkB,SAACC,GAC9B,IAAMC,EAAUC,SAASC,cAAcH,GACvC,GAAgB,OAAZC,EACF,MAAM,IAAIG,MAAJ,kBAAqBJ,EAArB,oBAER,OAAOC,EAAQ1F,Q;;;;;oECLjB,oEAAO,IAAM8F,EAAW,SAACC,GACvB,IAAMC,EAAW,4CAA4CC,KAAKF,GAC5DG,EAAM,CACVpB,IAAKqB,SAASH,EAAS,GAAI,IAC3BjB,MAAOoB,SAASH,EAAS,GAAI,IAC7BhB,KAAMmB,SAASH,EAAS,GAAI,KAK9B,OAHAE,EAAIpB,KAAO,IACXoB,EAAInB,OAAS,IACbmB,EAAIlB,MAAQ,IACLkB,GAGHE,EAAa,SAACvB,GAClB,IAAMkB,GAAe,IAARlB,GAAawB,SAAS,IACnC,OAAsB,IAAfN,EAAI7E,OAAJ,WAAuB6E,GAAQA,GAG3BO,EAAW,SAACzB,GACvB0B,QAAQC,OAAO3B,EAAMC,KAAO,EAAG,yBAC/B,IAAM2B,EAAKL,EAAWvB,EAAMC,KAC5ByB,QAAQC,OAAO3B,EAAME,OAAS,EAAG,2BACjC,IAAM2B,EAAKN,EAAWvB,EAAME,OAC5BwB,QAAQC,OAAO3B,EAAMG,MAAQ,EAAG,0BAChC,IAAM2B,EAAKP,EAAWvB,EAAMG,MAC5B,iBAAWyB,GAAX,OAAgBC,GAAhB,OAAqBC,K;;;;;6DCzBvB,oIAKaC,EAAc,SACzBvF,EACAwF,GAEA,OAAQA,EAAMlC,MACZ,IAAK,YACH,YAAgBtD,EAAIwF,GACpB,MACF,IAAK,WACH,YAAexF,EAAIwF,GACnB,MACF,IAAK,SACH,YAAaxF,EAAIwF,GACjB,MACF,IAAK,OACH,YAAWxF,EAAIwF,GACf,MACF,QACEN,QAAQO,MAAM,iCAAkCD,M;;;;;;;;;;;kVCiBlDE,ECrCiB,E,WAMnB,WAAYC,EAAkBjD,EAAsBK,I,4FAAsB,SAExE,IAAM6C,EAAStB,SAASC,cAAcoB,GAEtCE,KAAK7F,GAAK4F,EAAOE,WAAW,SAG5B,IAAM7C,EAAU,OAAAV,EAAA,GACdsD,KAAK7F,GACL0C,EACAK,GAEF8C,KAAK7F,GAAG+F,WAAW9C,GAGnB4C,KAAKG,gBAAkBH,KAAK7F,GAAGiG,kBAAkBhD,EAAS,YAC1D,IAAMiD,EAAoBL,KAAK7F,GAAGmG,mBAChClD,EACA,gBAEF4C,KAAKO,aAAeP,KAAK7F,GAAGmG,mBAAmBlD,EAAS,WAGxD4C,KAAK7F,GAAGqG,wBAAwBR,KAAKG,iBAGrCH,KAAKS,aAAeT,KAAK7F,GAAGuG,eAG5BV,KAAK7F,GAAGwG,UACNN,EACAL,KAAK7F,GAAG4F,OAAOtF,MACfuF,KAAK7F,GAAG4F,OAAOnF,QAEjBoF,KAAKY,c,6DAILZ,KAAK7F,GAAG0G,WAAW,EAAG,EAAG,EAAG,GAC5Bb,KAAK7F,GAAG2G,MAAMd,KAAK7F,GAAG4G,oB,6BAGjBC,GAAwB,WAC7BhB,KAAK7F,GAAG8G,WAAWjB,KAAK7F,GAAGa,aAAcgF,KAAKS,cAC9CT,KAAK7F,GAAG+G,oBACNlB,KAAKG,gBACL,EACAH,KAAK7F,GAAGgH,OACR,EACA,EACA,GAGFH,EAAOI,SAAQ,SAACzB,GACd,EAAKxF,GAAGkH,UACN,EAAKd,aACLZ,EAAMhC,MAAMC,IACZ+B,EAAMhC,MAAME,MACZ8B,EAAMhC,MAAMG,KACZ,GAGF,YAAY,EAAK3D,GAAIwF,W,gCD5DrB2B,EAAU,YADA,WAGVC,EAAW,YADA,WAGb,EAA2B,CAC7B,YAAe,CACbjH,SAAU,CACRC,EAAG,IACHI,EAAG,KAELH,WAAY,CACVC,MAAO,GACPG,OAAQ,IAEV+C,MAAO4D,IAET,YAAc,CACZjH,SAAU,CACRC,EAAG,IACHI,EAAG,KAELH,WAAY,CACVC,MAAO,GACPG,OAAQ,IAEV+C,MAAO2D,KAgBL,EAAW,SAAChH,GAChB,IAAMkH,EAAY,OAAAlD,EAAA,GAAgB,+BAC5B/D,EAAI0E,SAAS,OAAAX,EAAA,GAAgB,OAC7B3D,EAAIsE,SAAS,OAAAX,EAAA,GAAgB,OAK7BmD,EAAS,CACbnH,SAAUA,GAAY,CAAEC,IAAGI,KAC3BH,WAAY,CAAEC,MANFwE,SAAS,OAAAX,EAAA,GAAgB,WAMhB1D,OALRqE,SAAS,OAAAX,EAAA,GAAgB,aAMtCX,MALe,YAAS,OAAAW,EAAA,GAAgB,YAO1C,OAAQkD,GACN,IAAK,YACH,EAAOvH,KAAK,YAAewH,IAC3B5B,EAAM6B,OAAO,GACb,MACF,IAAK,WACH,EAAOzH,KAAK,YAAcwH,IAC1B5B,EAAM6B,OAAO,GACb,MACF,QACErC,QAAQO,MAAM,8BAA+B4B,KAI7CG,EAAoB,SAACC,GACzB,IAAMC,EAAqBD,EAAME,OAA6BC,wBACxDxH,EAAIqH,EAAMI,QAAUH,EAAkBI,KACtCtH,EAAIiH,EAAMM,QAAUL,EAAkBM,IAC5C,EAAS,CAAE5H,IAAGI,OAGVyH,EAAwB,SAACR,GAC7BA,EAAMS,iBACNT,EAAMU,kBACN,KAGIC,EAA2B,SAACX,GAChCA,EAAMS,iBACNT,EAAMU,kBACN,EAAS,GACTzC,EAAMe,eAIRnC,SAAS+D,iBAAiB,oBAAoB,WAzD5C3C,EAAQ,IAAI,EACV,UACA,OAAA4C,EAAA,GAAsB,oBACtB,OAAAA,EAAA,GAAsB,uBAEThE,SAASC,cAAc,WAC/B8D,iBAAiB,YAAab,GAAmB,GAqDxD9B,EAAM6B,OAAO,GAEbjD,SACGC,cAAc,aACd8D,iBAAiB,QAASJ,GAC7B3D,SACGC,cAAc,gBACd8D,iBAAiB,QAASD,O;;;;;uEE7G/B,kCAAO,IAAME,EAAwB,SAACC,GAEpC,OADgBjE,SAASkE,eAAeD,GACzBE,O;;;;;8DCFjB,2EAQaC,EAAe,SAC1B1I,EACA2I,GASA,IAPA,IAAMvH,EAASuH,EAAOtI,WAAWI,OAAS,EACpCY,EAAasH,EAAOtI,WAAWC,MAAQqI,EAAOtI,WAAWI,OACzDa,EAAuB,EAAVC,KAAKC,GAAUoH,EAC5BnH,EAAKkH,EAAOxI,SAASC,EACrBsB,EAAKiH,EAAOxI,SAASK,EAEvBqI,EAAe,CAACpH,EAAIC,GACfvC,EAAIyJ,EAAOzJ,GAAK,EAAGA,IAAK,CAC/B,IAAMyC,EAAQzC,EAAImC,EACZO,EAAKJ,EAAKL,EAASG,KAAKO,IAAIF,GAASP,EACrCU,EAAKL,EAAKN,EAASG,KAAKS,IAAIJ,GAClCiH,EAAa/I,KAAK+B,EAAIE,GAGX,MAAO4G,EAAOxI,WAEzB0I,EAAe,YAAsBA,IAGvC7I,EAAGY,WACDZ,EAAGa,aACH,IAAIC,aAAa+H,GACjB7I,EAAGe,aAELf,EAAGgB,WAAWhB,EAAG8I,aAAc,EAAGF,EAAQ,IAGtCA,EAAQ","file":"static/js/assignment3.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 47);\n","export const twoDimensionConverter = (points: number[]) => {\n  const newPoints = [];\n  for (let i = 0; i < points.length; i++) {\n    newPoints.push(points[i]);\n    // Push every odd number (after Y is inserted)\n    if (i % 2 === 1) {\n      newPoints.push(0);\n    }\n  }\n  return newPoints;\n};\n","import { twoDimensionConverter } from \"./twoDimensionConverter\";\n\nexport const renderRectangle = (\n  gl: WebGLRenderingContext,\n  rectangle: Canvas2D.Rectangle | Canvas3D.Rectangle\n) => {\n  const x1 = rectangle.position.x - rectangle.dimensions.width / 2;\n  const y1 = rectangle.position.y - rectangle.dimensions.height / 2;\n  const x2 = rectangle.position.x + rectangle.dimensions.width / 2;\n  const y2 = rectangle.position.y + rectangle.dimensions.height / 2;\n  let points = [x1, y1, x2, y1, x1, y2, x1, y2, x2, y1, x2, y2];\n\n  const is3D = \"z\" in rectangle.position;\n  if (is3D) {\n    points = twoDimensionConverter(points);\n  }\n\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n  gl.drawArrays(gl.TRIANGLES, 0, 6);\n};\n","import { twoDimensionConverter } from \"./twoDimensionConverter\";\n\n/**\n * Renders a 5-pointed star inside the given webGL context.\n *\n * 2:33am geometry is good geometry\n *\n * @param gl rendering context\n * @param star dimensions holder\n */\nexport const renderStar = (\n  gl: WebGLRenderingContext,\n  star: Canvas2D.Star | Canvas3D.Star\n) => {\n  const radius = star.dimensions.height / 2;\n  const dimenScale = star.dimensions.width / star.dimensions.height;\n  const increment = (Math.PI * 2) / 5;\n  const cx = star.position.x;\n  const cy = star.position.y;\n  // Generate points from top, clockwise\n  const starPoints = {};\n  for (let n = 0; n < 5; n++) {\n    const angle = Math.PI / 2 - n * increment;\n    const xn = cx + radius * Math.cos(angle) * dimenScale;\n    const yn = cy - radius * Math.sin(angle);\n    starPoints[`${n + 1}`] = [xn, yn];\n  }\n  // Generate sixth point below center\n  starPoints[\"6\"] = [\n    cx,\n    cy + radius * (Math.tan((1 / 5) * Math.PI) - Math.tan((1 / 10) * Math.PI)),\n  ];\n  // Produce three triangles that compose the star\n  const t1 = [...starPoints[\"1\"], ...starPoints[\"3\"], ...starPoints[\"6\"]];\n  const t2 = [...starPoints[\"1\"], ...starPoints[\"6\"], ...starPoints[\"4\"]];\n  const t3 = [...starPoints[\"5\"], ...starPoints[\"2\"], ...starPoints[\"6\"]];\n\n  let points = [...t1, ...t2, ...t3];\n\n  const is3D = \"z\" in star.position;\n  if (is3D) {\n    points = twoDimensionConverter(points);\n  }\n\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n  gl.drawArrays(gl.TRIANGLES, 0, 3 * 3);\n};\n","import { twoDimensionConverter } from \"./twoDimensionConverter\";\n\nexport const renderTriangle = (\n  gl: WebGLRenderingContext,\n  triangle: Canvas2D.Triangle | Canvas3D.Triangle\n) => {\n  const x1 = triangle.position.x - triangle.dimensions.width / 2;\n  const y1 = triangle.position.y + triangle.dimensions.height / 2;\n  const x2 = triangle.position.x + triangle.dimensions.width / 2;\n  const y2 = triangle.position.y + triangle.dimensions.height / 2;\n  const x3 = triangle.position.x;\n  const y3 = triangle.position.y - triangle.dimensions.height / 2;\n\n  let points = [x1, y1, x3, y3, x2, y2];\n\n  const is3D = \"z\" in triangle.position;\n  if (is3D) {\n    points = twoDimensionConverter(points);\n  }\n\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(points), gl.STATIC_DRAW);\n  gl.drawArrays(gl.TRIANGLES, 0, 3);\n};\n","export const createProgramFromScripts = (\n  gl: WebGLRenderingContext,\n  vertexShaderSource: string,\n  fragmentShaderSource: string\n) => {\n  // Create GLSL shaders, upload the GLSL source, compile the shaders\n  const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n  gl.shaderSource(vertexShader, vertexShaderSource);\n  gl.compileShader(vertexShader);\n\n  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n  gl.shaderSource(fragmentShader, fragmentShaderSource);\n  gl.compileShader(fragmentShader);\n\n  // Link the two shaders into a program\n  const program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n\n  return program;\n};\n","const buildBasicShape = (type: Canvas2D.ShapeType) => (\n  properties: Partial<Canvas2D.Shape> = {}\n): Canvas2D.Shape => {\n  return {\n    type,\n    position: {\n      x: 0,\n      y: 0,\n    },\n    dimensions: {\n      width: 1,\n      height: 1,\n    },\n    color: {\n      red: 0,\n      green: 0,\n      blue: 0,\n    },\n    translation: { x: 0, y: 0 },\n    rotation: { z: 0 },\n    scale: { x: 1, y: 1 },\n    ...properties,\n  };\n};\n\nexport const buildRectangle = buildBasicShape(\"RECTANGLE\");\nexport const buildTriangle = buildBasicShape(\"TRIANGLE\");\nexport const buildStar = buildBasicShape(\"STAR\");\nexport const buildCircle = buildBasicShape(\"CIRCLE\");\n\nexport const buildShape = (\n  type: Canvas2D.ShapeType,\n  properties: Partial<Canvas2D.Shape>\n) => {\n  return buildBasicShape(type)(properties);\n};\n","export const getElementValue = (query: string) => {\n  const element = document.querySelector(query) as HTMLInputElement;\n  if (element === null) {\n    throw new Error(`Element ${query} does not exist`);\n  }\n  return element.value;\n};\n","export const hexToRgb = (hex: string) => {\n  const parseRgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  const rgb = {\n    red: parseInt(parseRgb[1], 16),\n    green: parseInt(parseRgb[2], 16),\n    blue: parseInt(parseRgb[3], 16),\n  };\n  rgb.red /= 255;\n  rgb.green /= 255;\n  rgb.blue /= 255;\n  return rgb;\n};\n\nconst colorToHex = (color: number): string => {\n  const hex = (color * 255).toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n};\n\nexport const rgbToHex = (color: Canvas2D.Color) => {\n  console.assert(color.red <= 1, \"Red is greater than 1\");\n  const rh = colorToHex(color.red);\n  console.assert(color.green <= 1, \"Green is greater than 1\");\n  const gh = colorToHex(color.green);\n  console.assert(color.blue <= 1, \"Blue is greater than 1\");\n  const bh = colorToHex(color.blue);\n  return `#${rh}${gh}${bh}`;\n};\n","import { renderCircle } from \"./circle\";\nimport { renderRectangle } from \"./rectangle\";\nimport { renderStar } from \"./star\";\nimport { renderTriangle } from \"./triangle\";\n\nexport const renderShape = (\n  gl: WebGLRenderingContext,\n  shape: Canvas2D.Shape\n) => {\n  switch (shape.type) {\n    case \"RECTANGLE\":\n      renderRectangle(gl, shape as Canvas2D.Rectangle);\n      break;\n    case \"TRIANGLE\":\n      renderTriangle(gl, shape as Canvas2D.Triangle);\n      break;\n    case \"CIRCLE\":\n      renderCircle(gl, shape as Canvas2D.Circle);\n      break;\n    case \"STAR\":\n      renderStar(gl, shape as Canvas2D.Star);\n      break;\n    default:\n      console.error(\"Rendering unhandled shape type\", shape);\n  }\n};\n","import { getElementValue } from \"@common/form/getElementValue\";\nimport {\n  buildRectangle,\n  buildTriangle,\n} from \"@common/model/canvas2DShapeBuilders\";\nimport { getScriptContentsById } from \"@common/setup/getScriptContentsById\";\nimport { hexToRgb } from \"@common/util/colors\";\n\nimport Scene from \"./Scene\";\n\nconst RED_HEX = \"#FF0000\";\nconst RED_RGB = hexToRgb(RED_HEX);\nconst BLUE_HEX = \"#0000FF\";\nconst BLUE_RGB = hexToRgb(BLUE_HEX);\n\nlet shapes: Canvas2D.Shape[] = [\n  buildRectangle({\n    position: {\n      x: 200,\n      y: 100,\n    },\n    dimensions: {\n      width: 50,\n      height: 50,\n    },\n    color: BLUE_RGB,\n  }),\n  buildTriangle({\n    position: {\n      x: 300,\n      y: 100,\n    },\n    dimensions: {\n      width: 50,\n      height: 50,\n    },\n    color: RED_RGB,\n  }),\n];\n\nlet scene: Scene;\n\nconst init = () => {\n  scene = new Scene(\n    \"#canvas\",\n    getScriptContentsById(\"vertex-shader-2d\"),\n    getScriptContentsById(\"fragment-shader-2d\")\n  );\n  const canvas = document.querySelector(\"#canvas\") as HTMLCanvasElement;\n  canvas.addEventListener(\"mousedown\", onCanvasMouseDown, false);\n};\n\nconst addShape = (position?: Canvas2D.Position) => {\n  const shapeType = getElementValue(\"input[name='shape']:checked\");\n  const x = parseInt(getElementValue(\"#x\"));\n  const y = parseInt(getElementValue(\"#y\"));\n  const width = parseInt(getElementValue(\"#width\"));\n  const height = parseInt(getElementValue(\"#height\"));\n  const colorRgb = hexToRgb(getElementValue(\"#color\"));\n  // Shared shape config\n  const config = {\n    position: position || { x, y },\n    dimensions: { width, height },\n    color: colorRgb,\n  };\n  switch (shapeType) {\n    case \"RECTANGLE\":\n      shapes.push(buildRectangle(config));\n      scene.render(shapes);\n      break;\n    case \"TRIANGLE\":\n      shapes.push(buildTriangle(config));\n      scene.render(shapes);\n      break;\n    default:\n      console.error(\"Adding unhandled shape type\", shapeType);\n  }\n};\n\nconst onCanvasMouseDown = (event: MouseEvent) => {\n  const boundingRectangle = (event.target as HTMLCanvasElement).getBoundingClientRect();\n  const x = event.clientX - boundingRectangle.left;\n  const y = event.clientY - boundingRectangle.top;\n  addShape({ x, y });\n};\n\nconst onAddShapeButtonClick = (event: MouseEvent) => {\n  event.preventDefault();\n  event.stopPropagation();\n  addShape();\n};\n\nconst onClearCanvasButtonClick = (event: MouseEvent) => {\n  event.preventDefault();\n  event.stopPropagation();\n  shapes = [];\n  scene.clearCanvas();\n};\n\n// Assign some functions to window\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  init();\n  scene.render(shapes);\n\n  document\n    .querySelector(\"#addShape\")\n    .addEventListener(\"click\", onAddShapeButtonClick);\n  document\n    .querySelector(\"#clearCanvas\")\n    .addEventListener(\"click\", onClearCanvasButtonClick);\n});\n","import { renderShape } from \"@common/render/2d\";\nimport { createProgramFromScripts } from \"@common/setup/createProgramFromScripts\";\n\nexport default class Scene {\n  private readonly gl: WebGLRenderingContext;\n  private readonly attributeCoords: number;\n  private readonly uniformColor: WebGLUniformLocation;\n  private readonly bufferCoords: WebGLBuffer;\n\n  constructor(canvasId: string, vertexShader: string, fragmentShader: string) {\n    // get a reference to the canvas and WebGL context\n    const canvas = document.querySelector(canvasId) as HTMLCanvasElement;\n\n    this.gl = canvas.getContext(\"webgl\");\n\n    // create and use a GLSL program\n    const program = createProgramFromScripts(\n      this.gl,\n      vertexShader,\n      fragmentShader\n    );\n    this.gl.useProgram(program);\n\n    // get reference to GLSL attributes and uniforms\n    this.attributeCoords = this.gl.getAttribLocation(program, \"a_coords\");\n    const uniformResolution = this.gl.getUniformLocation(\n      program,\n      \"u_resolution\"\n    );\n    this.uniformColor = this.gl.getUniformLocation(program, \"u_color\");\n\n    // initialize coordinate attribute to send each vertex to GLSL program\n    this.gl.enableVertexAttribArray(this.attributeCoords);\n\n    // initialize coordinate buffer to send array of vertices to GPU\n    this.bufferCoords = this.gl.createBuffer();\n\n    // configure canvas resolution and clear the canvas\n    this.gl.uniform2f(\n      uniformResolution,\n      this.gl.canvas.width,\n      this.gl.canvas.height\n    );\n    this.clearCanvas();\n  }\n\n  clearCanvas() {\n    this.gl.clearColor(0, 0, 0, 0);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n  }\n\n  render(shapes: Canvas2D.Shape[]) {\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.bufferCoords);\n    this.gl.vertexAttribPointer(\n      this.attributeCoords,\n      2,\n      this.gl.FLOAT,\n      false,\n      0,\n      0\n    );\n\n    shapes.forEach((shape) => {\n      this.gl.uniform4f(\n        this.uniformColor,\n        shape.color.red,\n        shape.color.green,\n        shape.color.blue,\n        1\n      );\n\n      renderShape(this.gl, shape);\n    });\n  }\n}\n","export const getScriptContentsById = (id: string): string => {\n  const element = document.getElementById(id) as HTMLScriptElement;\n  return element.text;\n};\n","import { twoDimensionConverter } from \"./twoDimensionConverter\";\n\n/**\n * Renders a n-side polygon as a circle inside the given webGL context.\n *\n * @param gl rendering context\n * @param circle dimensions holder\n */\nexport const renderCircle = (\n  gl: WebGLRenderingContext,\n  circle: Canvas2D.Circle | Canvas3D.Circle\n) => {\n  const radius = circle.dimensions.height / 2;\n  const dimenScale = circle.dimensions.width / circle.dimensions.height;\n  const increment = (Math.PI * 2) / SIDES;\n  const cx = circle.position.x;\n  const cy = circle.position.y;\n  // Generate points based on unit circle\n  let circlePoints = [cx, cy];\n  for (let n = SIDES; n >= 0; n--) {\n    const angle = n * increment;\n    const xn = cx + radius * Math.cos(angle) * dimenScale;\n    const yn = cy - radius * Math.sin(angle);\n    circlePoints.push(xn, yn);\n  }\n\n  const is3D = \"z\" in circle.position;\n  if (is3D) {\n    circlePoints = twoDimensionConverter(circlePoints);\n  }\n\n  gl.bufferData(\n    gl.ARRAY_BUFFER,\n    new Float32Array(circlePoints),\n    gl.STATIC_DRAW\n  );\n  gl.drawArrays(gl.TRIANGLE_FAN, 0, SIDES + 2);\n};\n\nconst SIDES = 24;\n"],"sourceRoot":""}